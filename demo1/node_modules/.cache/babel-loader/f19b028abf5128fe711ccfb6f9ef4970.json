{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Vscode\\\\code\\\\React\\\\demo1\\\\src\\\\TicTacToe\\\\Square.js\";\n\n// import React, { Component } from 'react';\n// class Square extends Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {  \n//             value:null,\n//         };\n//     }\n//     render() { \n//         return (\n//             // 当前state保存在单个Square组件中\n//             // <button className=\"square\" onClick={()=>this.setState({value:'x'})}>\n//             //     {this.state.value}\n//             // </button>\n//             // this.props.onClick()这个方法是由Board传给Square的，所以当Square中的事件处理函数触发时，\n//             // 其实就是触发Board当中的this.handleClick(i)方法\n//             <button className=\"square\" onClick={()=>this.props.onClick()}>\n//                 {this.props.value}\n//             </button>\n//         );\n//     }\n// }\n// 把Square组件重写为一个函数组件\n// 函数组件和类组件的区别：函数组件没this,类有 函数组件没state，类有 函数组件没生命周期，类有\n// 如果想写的组件只包含一个render方法，并且不包含state，那么使用函数组件就会更简单\n// 这个函数接收props作为参数，然后返回需要渲染的元素\nfunction Square(props) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    children: props.value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Square;\nexport default Square;\n\nvar _c;\n\n$RefreshReg$(_c, \"Square\");","map":{"version":3,"sources":["D:/Vscode/code/React/demo1/src/TicTacToe/Square.js"],"names":["Square","props","onClick","value"],"mappings":";;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA,SAASA,MAAT,CAAgBC,KAAhB,EAAsB;AAClB,sBACI;AAAQ,IAAA,SAAS,EAAC,QAAlB;AAA2B,IAAA,OAAO,EAAEA,KAAK,CAACC,OAA1C;AAAA,cACKD,KAAK,CAACE;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;KANQH,M;AAQT,eAAeA,MAAf","sourcesContent":["// import React, { Component } from 'react';\r\n\r\n// class Square extends Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//         this.state = {  \r\n//             value:null,\r\n//         };\r\n//     }\r\n//     render() { \r\n//         return (\r\n//             // 当前state保存在单个Square组件中\r\n//             // <button className=\"square\" onClick={()=>this.setState({value:'x'})}>\r\n//             //     {this.state.value}\r\n//             // </button>\r\n\r\n//             // this.props.onClick()这个方法是由Board传给Square的，所以当Square中的事件处理函数触发时，\r\n//             // 其实就是触发Board当中的this.handleClick(i)方法\r\n//             <button className=\"square\" onClick={()=>this.props.onClick()}>\r\n//                 {this.props.value}\r\n//             </button>\r\n//         );\r\n//     }\r\n// }\r\n\r\n// 把Square组件重写为一个函数组件\r\n// 函数组件和类组件的区别：函数组件没this,类有 函数组件没state，类有 函数组件没生命周期，类有\r\n// 如果想写的组件只包含一个render方法，并且不包含state，那么使用函数组件就会更简单\r\n// 这个函数接收props作为参数，然后返回需要渲染的元素\r\nfunction Square(props){\r\n    return (\r\n        <button className=\"square\" onClick={props.onClick}>\r\n            {props.value}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Square"]},"metadata":{},"sourceType":"module"}