{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Vscode\\\\code\\\\React\\\\demo1\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\n\nclass Child extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      message: 'hello',\n      num: 0\n    };\n\n    this.say = () => {\n      console.log('触发子方法'); // 父组件传递给子组件的有state 、 children 插槽文字 、say函数\n\n      console.log(this.props);\n      this.props.say();\n    };\n  }\n\n  // 侦听可以获取上一个值和最新的值，可以在componentDidUpdate中手动处理\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.num !== this.state.num) {\n      console.log(prevState.num, '原来的值');\n      console.log(this.state.num, '最新的值');\n    }\n  }\n\n  render() {\n    const {\n      msg,\n      children\n    } = this.props;\n    const {\n      message,\n      num\n    } = this.state; // React可以直接再render中定义计算属性，因为state发生更新以后，整个render会重新渲染\n\n    const reverseMsg = message.split('').reverse().join('');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: this.say,\n        children: [msg, /*#__PURE__*/_jsxDEV(\"div\", {\n          children: children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: [reverseMsg, num++]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nclass Parent extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      msg: '传递给子组件的值'\n    };\n\n    this.say = () => {\n      console.log('父组件里触发方法');\n    };\n  }\n\n  render() {\n    const {\n      msg\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Child, {\n        msg: msg,\n        say: this.say,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"\\u63D2\\u69FD\\u6587\\u5B57\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Parent;","map":{"version":3,"sources":["D:/Vscode/code/React/demo1/src/App.js"],"names":["React","Component","Child","state","message","num","say","console","log","props","componentDidUpdate","prevProps","prevState","render","msg","children","reverseMsg","split","reverse","join","Parent"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,KAAN,SAAoBD,SAApB,CAA8B;AAAA;AAAA;AAAA,SAC1BE,KAD0B,GAClB;AACJC,MAAAA,OAAO,EAAC,OADJ;AAEJC,MAAAA,GAAG,EAAC;AAFA,KADkB;;AAAA,SAK1BC,GAL0B,GAKtB,MAAM;AACNC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EADM,CAEN;;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB;AACA,WAAKA,KAAL,CAAWH,GAAX;AACH,KAVyB;AAAA;;AAY1B;AACAI,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAsB;AACpC,QAAGA,SAAS,CAACP,GAAV,KAAkB,KAAKF,KAAL,CAAWE,GAAhC,EAAoC;AAChCE,MAAAA,OAAO,CAACC,GAAR,CAAYI,SAAS,CAACP,GAAtB,EAA0B,MAA1B;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKL,KAAL,CAAWE,GAAvB,EAA2B,MAA3B;AACH;AACJ;;AAEDQ,EAAAA,MAAM,GAAG;AACL,UAAM;AAACC,MAAAA,GAAD;AAAKC,MAAAA;AAAL,QAAe,KAAKN,KAA1B;AACA,UAAM;AAACL,MAAAA,OAAD;AAASC,MAAAA;AAAT,QAAe,KAAKF,KAA1B,CAFK,CAIL;;AACA,UAAMa,UAAU,GAAEZ,OAAO,CAACa,KAAR,CAAc,EAAd,EAAkBC,OAAlB,GAA4BC,IAA5B,CAAiC,EAAjC,CAAlB;AAEA,wBACI;AAAA,8BACI;AAAK,QAAA,OAAO,EAAE,KAAKb,GAAnB;AAAA,mBACKQ,GADL,eAGI;AAAA,oBACKC;AADL;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAQJ;AAAA,mBAASC,UAAT,EAAqBX,GAAG,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,cARI;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAYH;;AAvCyB;;AA0C9B,MAAMe,MAAN,SAAqBnB,SAArB,CAA+B;AAAA;AAAA;AAAA,SAC3BE,KAD2B,GACnB;AACJW,MAAAA,GAAG,EAAE;AADD,KADmB;;AAAA,SAK3BR,GAL2B,GAKvB,MAAI;AACJC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACH,KAP0B;AAAA;;AAS3BK,EAAAA,MAAM,GAAG;AACL,UAAM;AAACC,MAAAA;AAAD,QAAQ,KAAKX,KAAnB;AACA,wBACI;AAAA,6BACI,QAAC,KAAD;AAAO,QAAA,GAAG,EAAEW,GAAZ;AAAiB,QAAA,GAAG,EAAE,KAAKR,GAA3B;AAAA,+BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AASH;;AApB0B;;AAuB/B,eAAec,MAAf","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Child extends Component {\r\n    state = {  \r\n        message:'hello',\r\n        num:0\r\n    }\r\n    say=() => {\r\n        console.log('触发子方法');\r\n        // 父组件传递给子组件的有state 、 children 插槽文字 、say函数\r\n        console.log(this.props)\r\n        this.props.say();\r\n    }\r\n\r\n    // 侦听可以获取上一个值和最新的值，可以在componentDidUpdate中手动处理\r\n    componentDidUpdate(prevProps, prevState){\r\n        if(prevState.num !== this.state.num){\r\n            console.log(prevState.num,'原来的值')\r\n            console.log(this.state.num,'最新的值')\r\n        }\r\n    }\r\n\r\n    render() { \r\n        const {msg,children}=this.props;\r\n        const {message,num} =this.state;\r\n\r\n        // React可以直接再render中定义计算属性，因为state发生更新以后，整个render会重新渲染\r\n        const reverseMsg =message.split('').reverse().join('')\r\n\r\n        return (\r\n            <div>\r\n                <div onClick={this.say}>\r\n                    {msg}\r\n                    {/* 插槽 */}\r\n                    <div>\r\n                        {children}\r\n                    </div>\r\n                </div>\r\n        <button>{reverseMsg}{num++}</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Parent extends Component {\r\n    state = { \r\n        msg: '传递给子组件的值'\r\n     }\r\n    \r\n    say=()=>{\r\n        console.log('父组件里触发方法')\r\n    }\r\n    \r\n    render() { \r\n        const {msg} = this.state;\r\n        return (\r\n            <div>\r\n                <Child msg={msg} say={this.say}>\r\n                    <div>\r\n                        插槽文字\r\n                    </div>\r\n                </Child>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Parent;\r\n \r\n"]},"metadata":{},"sourceType":"module"}