{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Vscode\\\\code\\\\React\\\\demo1\\\\src\\\\TicTacToe\\\\Game.js\";\nimport React, { Component } from 'react';\nimport Board from './Board'; // 使用slice()函数为每一步创建squares数组副本，同时把这个数组当作不可变对象，\n// 这样就可以把所有squares数组的历史版本都保存下来了，然后可以在历史的步骤中随意跳转\n// 把历史的squares数组保存在另一个名为history的数组中，history数组保存了从第一步到最后一步所有棋盘状态\n// 再次状态提升到Game组件，把state从Board组件提升到顶层的Game组件里，这样Game组件就拥有了对Board组件数据的完全控制权\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      xIsNext: true\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const squares = current.squares.slice(); // 如果已经判断出胜利者或者该方格已经被点过了，就不能再点了\n\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const winner = calculateWinner(current.squares);\n    let status;\n\n    if (winner) {\n      status = 'Winner:' + winner;\n    } else {\n      status = 'Next player:' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          squares: current.squares,\n          onClick: i => this.handleClick(i)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["D:/Vscode/code/React/demo1/src/TicTacToe/Game.js"],"names":["React","Component","Board","Game","constructor","props","state","history","squares","Array","fill","xIsNext","handleClick","i","current","length","slice","calculateWinner","setState","concat","render","winner","status"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,SAAlB,C,CAEA;AACA;AACA;AACA;;AACA,MAAMC,IAAN,SAAmBF,SAAnB,CAA6B;AACzBG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAC,CAAC;AACLC,QAAAA,OAAO,EAAEC,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd;AADJ,OAAD,CADC;AAITC,MAAAA,OAAO,EAAC;AAJC,KAAb;AAMH;;AAEDC,EAAAA,WAAW,CAACC,CAAD,EAAG;AACV,UAAMN,OAAO,GAAG,KAAKD,KAAL,CAAWC,OAA3B;AACA,UAAMO,OAAO,GAAGP,OAAO,CAACA,OAAO,CAACQ,MAAR,GAAe,CAAhB,CAAvB;AACA,UAAMP,OAAO,GAAGM,OAAO,CAACN,OAAR,CAAgBQ,KAAhB,EAAhB,CAHU,CAIV;;AACA,QAAIC,eAAe,CAACT,OAAD,CAAf,IAA4BA,OAAO,CAACK,CAAD,CAAvC,EAA2C;AACvC;AACH;;AACDL,IAAAA,OAAO,CAACK,CAAD,CAAP,GAAa,KAAKP,KAAL,CAAWK,OAAX,GAAmB,GAAnB,GAAuB,GAApC;AACA,SAAKO,QAAL,CAAc;AACVX,MAAAA,OAAO,EAACA,OAAO,CAACY,MAAR,CAAe,CAAC;AACpBX,QAAAA,OAAO,EAACA;AADY,OAAD,CAAf,CADE;AAIVG,MAAAA,OAAO,EAAE,CAAC,KAAKL,KAAL,CAAWK;AAJX,KAAd;AAMH;;AAEDS,EAAAA,MAAM,GAAG;AACL,UAAMb,OAAO,GAAG,KAAKD,KAAL,CAAWC,OAA3B;AACA,UAAMO,OAAO,GAAGP,OAAO,CAACA,OAAO,CAACQ,MAAR,GAAe,CAAhB,CAAvB;AACA,UAAMM,MAAM,GAAGJ,eAAe,CAACH,OAAO,CAACN,OAAT,CAA9B;AAEA,QAAIc,MAAJ;;AACA,QAAGD,MAAH,EAAU;AACNC,MAAAA,MAAM,GAAC,YAAUD,MAAjB;AACH,KAFD,MAEK;AACDC,MAAAA,MAAM,GAAC,kBAAkB,KAAKhB,KAAL,CAAWK,OAAX,GAAmB,GAAnB,GAAuB,GAAzC,CAAP;AACH;;AAED,wBACI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,+BACI,QAAC,KAAD;AACI,UAAA,OAAO,EAAEG,OAAO,CAACN,OADrB;AAEI,UAAA,OAAO,EAAGK,CAAD,IAAO,KAAKD,WAAL,CAAiBC,CAAjB;AAFpB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAOI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,+BAEI;AAAA,oBAAMS;AAAN;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAcH;;AAtDwB;;AAyD7B,eAAenB,IAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport Board from './Board'\r\n\r\n// 使用slice()函数为每一步创建squares数组副本，同时把这个数组当作不可变对象，\r\n// 这样就可以把所有squares数组的历史版本都保存下来了，然后可以在历史的步骤中随意跳转\r\n// 把历史的squares数组保存在另一个名为history的数组中，history数组保存了从第一步到最后一步所有棋盘状态\r\n// 再次状态提升到Game组件，把state从Board组件提升到顶层的Game组件里，这样Game组件就拥有了对Board组件数据的完全控制权\r\nclass Game extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            history:[{\r\n                squares: Array(9).fill(null)\r\n            }],\r\n            xIsNext:true\r\n        }\r\n    }\r\n\r\n    handleClick(i){\r\n        const history = this.state.history;\r\n        const current = history[history.length-1];\r\n        const squares = current.squares.slice();\r\n        // 如果已经判断出胜利者或者该方格已经被点过了，就不能再点了\r\n        if (calculateWinner(squares) || squares[i]){\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext?'X':'O';\r\n        this.setState({\r\n            history:history.concat([{\r\n                squares:squares\r\n            }]),\r\n            xIsNext: !this.state.xIsNext,\r\n        })\r\n    }\r\n\r\n    render() { \r\n        const history = this.state.history;\r\n        const current = history[history.length-1];\r\n        const winner = calculateWinner(current.squares);\r\n\r\n        let status;\r\n        if(winner){\r\n            status='Winner:'+winner;\r\n        }else{\r\n            status='Next player:' + (this.state.xIsNext?'X':'O');\r\n        }\r\n\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board\r\n                        squares={current.squares}\r\n                        onClick={(i) => this.handleClick(i)}\r\n                    />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    {/* <Board /> */}\r\n                    <div>{status}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Game;"]},"metadata":{},"sourceType":"module"}