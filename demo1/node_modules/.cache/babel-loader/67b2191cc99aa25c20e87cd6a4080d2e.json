{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Vscode\\\\code\\\\React\\\\demo1\\\\src\\\\Redux\\\\redux.js\";\n// Redux: \n// React数据状态管理。用于中大型，数据比较庞大，组件之间数据交互较多的情况下使用。\n// Store:数据仓库，保存数据的地方。\n// State：state是一个对象，数据仓库里的所有数据都放到一个state里。\n// Action：1个动作，触发数据改变的方法。\n// Dispatch: 将动作触发成方法。\n// Reducer:是一个函数，通过获取动作，改变数据，生成一个新state。从而改变页面\nimport React, { Component } from 'react';\nimport Redux, { createStore } from 'redux';\nimport ReactDOM from 'react-dom';\n\nconst reducer = function (state = {\n  num: 0\n}, action) {\n  switch (action.type) {\n    case \"add\":\n      state.num++;\n      break;\n\n    case \"decrement\":\n      state.num--;\n      break;\n  }\n\n  return { ...state\n  };\n};\n\nconst store = createStore(reducer);\nconsole.log(store);\n\nfunction add() {\n  // 通过仓库的方法dispatch进行修改数据\n  store.dispatch({\n    type: \"add\"\n  });\n  console.log(store.getState());\n}\n\nfunction decrement() {\n  // 通过仓库的方法dispatch进行修改数据\n  store.dispatch({\n    type: \"decrement\"\n  });\n  console.log(store.getState());\n} // 函数式计数器\n\n\nconst Counter = function (props) {\n  console.log(store.getState());\n  let state = store.getState();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"\\u8BA1\\u6570\\u6570\\u91CF\\uFF1A\", state.num]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: add,\n      children: \"\\u8BA1\\u6570+1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: decrement,\n      children: \"\\u8BA1\\u6570-1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Counter;\nstore.subscribe(() => {\n  ReactDOM.render( /*#__PURE__*/_jsxDEV(Counter, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 21\n  }, this), document.getElementById('root'));\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"Counter\");","map":{"version":3,"sources":["D:/Vscode/code/React/demo1/src/Redux/redux.js"],"names":["React","Component","Redux","createStore","ReactDOM","reducer","state","num","action","type","store","console","log","add","dispatch","getState","decrement","Counter","props","subscribe","render","document","getElementById"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,IAAcC,WAAd,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,WAArB;;AAGA,MAAMC,OAAO,GAAG,UAASC,KAAK,GAAC;AAACC,EAAAA,GAAG,EAAC;AAAL,CAAf,EAAuBC,MAAvB,EAA8B;AAC1C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,KAAL;AACIH,MAAAA,KAAK,CAACC,GAAN;AACA;;AACJ,SAAK,WAAL;AACID,MAAAA,KAAK,CAACC,GAAN;AACA;AANR;;AAQA,SAAO,EAAC,GAAGD;AAAJ,GAAP;AACH,CAVD;;AAYA,MAAMI,KAAK,GAAGP,WAAW,CAACE,OAAD,CAAzB;AACAM,OAAO,CAACC,GAAR,CAAYF,KAAZ;;AAEA,SAASG,GAAT,GAAc;AACV;AACAH,EAAAA,KAAK,CAACI,QAAN,CAAe;AAACL,IAAAA,IAAI,EAAC;AAAN,GAAf;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACK,QAAN,EAAZ;AACH;;AAED,SAASC,SAAT,GAAoB;AAChB;AACAN,EAAAA,KAAK,CAACI,QAAN,CAAe;AAACL,IAAAA,IAAI,EAAC;AAAN,GAAf;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACK,QAAN,EAAZ;AACH,C,CAED;;;AACA,MAAME,OAAO,GAAG,UAASC,KAAT,EAAe;AAC3BP,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACK,QAAN,EAAZ;AACA,MAAIT,KAAK,GAACI,KAAK,CAACK,QAAN,EAAV;AACA,sBACI;AAAA,4BACI;AAAA,mDAAUT,KAAK,CAACC,GAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAGI;AAAQ,MAAA,OAAO,EAAEM,GAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAQ,MAAA,OAAO,EAAEG,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CAXD;;KAAMC,O;AAaNP,KAAK,CAACS,SAAN,CAAgB,MAAI;AAChBf,EAAAA,QAAQ,CAACgB,MAAT,eAAgB,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,UAAhB,EAAqCC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAArC;AACD,CAFH","sourcesContent":["// Redux: \r\n// React数据状态管理。用于中大型，数据比较庞大，组件之间数据交互较多的情况下使用。\r\n// Store:数据仓库，保存数据的地方。\r\n// State：state是一个对象，数据仓库里的所有数据都放到一个state里。\r\n// Action：1个动作，触发数据改变的方法。\r\n// Dispatch: 将动作触发成方法。\r\n// Reducer:是一个函数，通过获取动作，改变数据，生成一个新state。从而改变页面\r\n\r\nimport React, { Component } from 'react';\r\nimport Redux,{createStore} from 'redux';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\nconst reducer = function(state={num:0},action){\r\n    switch(action.type){\r\n        case \"add\":\r\n            state.num++;\r\n            break;\r\n        case \"decrement\":\r\n            state.num--;\r\n            break;\r\n    }\r\n    return {...state}\r\n}\r\n\r\nconst store = createStore(reducer)\r\nconsole.log(store)\r\n\r\nfunction add(){\r\n    // 通过仓库的方法dispatch进行修改数据\r\n    store.dispatch({type:\"add\"})\r\n    console.log(store.getState())\r\n}\r\n\r\nfunction decrement(){\r\n    // 通过仓库的方法dispatch进行修改数据\r\n    store.dispatch({type:\"decrement\"})\r\n    console.log(store.getState())\r\n}\r\n\r\n// 函数式计数器\r\nconst Counter = function(props){\r\n    console.log(store.getState())\r\n    let state=store.getState()\r\n    return (\r\n        <div>\r\n            <h1>计数数量：{state.num}</h1>\r\n\r\n            <button onClick={add}>计数+1</button>\r\n            <button onClick={decrement}>计数-1</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nstore.subscribe(()=>{\r\n    ReactDOM.render(<Counter></Counter>, document.getElementById('root'),)\r\n  })"]},"metadata":{},"sourceType":"module"}